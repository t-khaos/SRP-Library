#pragma kernel CSMain//指定kernel函数名

#include "UnityCG.cginc"


RWStructuredBuffer<float4x4> _matrixBuffer; //可被CS读写的二维纹理，存储了instances的模型变换矩阵
AppendStructuredBuffer<float4x4> _validMatrixBuffer; //剔除后的M矩阵
RWStructuredBuffer<uint> _argsBuffer;

int _instanceCount;
int _size;

float4 _planes[6];
float4 _bounds[8];

float4x4 _vpMatrix;

Texture2D _hizTex;

int IsPointOnSideOfPlaneNormal(float4 plane, float3 p) {
    return dot(plane.xyz, p) + plane.w > 0 ? 1 : 0;  
}

int IsPointInsideFrustum(float4 planes[6], float3 p)  {  
    int count = 0;  
    for (int i = 0; i < 6; i++)  
        count += IsPointOnSideOfPlaneNormal(planes[i], p);  
    return count == 6 ? 1 : 0;  
}  
bool IsBoundsInsideFrustum(float4 planes[6], float4 bounds[8])  {  
    int count = 0;  
    for (int i = 0; i < 8; i++)  
        count += IsPointInsideFrustum(planes, bounds[i]);  
    return count > 0;  
}

[numthreads(128,1,1)]//核函数对应线程组里线程的数量
void CSMain(uint3 gid:SV_GroupID, uint3 tid : SV_GroupThreadID)
{
    uint index = gid.x * 128 + tid.x;
    if (index >= (uint)_instanceCount) return;
    
    float4x4 ObjectToWorld = _matrixBuffer[index];
    //包围盒世界坐标
    float4 worldBounds[8];
    for(int i=0; i<8; i++)
    {
        worldBounds[i] = mul(ObjectToWorld, _bounds[i]);
    }
    //视锥剔除
    bool vis = IsBoundsInsideFrustum(_planes, worldBounds);
    if(!vis) return;

    //保存剔除后的变换矩阵
    _validMatrixBuffer.Append(ObjectToWorld);
}
